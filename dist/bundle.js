(()=>{"use strict";let o=0;const t=new Set,n=[],i=[],e=[],s=[];function r(){const r=o++;return t.add(r),n[r]=null,i[r]=null,e[r]=null,s[r]=null,r}function c(o,t){n[o]=t}function a(o,t){s[o]=t}function l(o){return n[o]}function f(o){return i[o]}function u(o){return e[o]}function p(o){return s[o]}const h={moveX:0,moveZ:0,mining:!1};let v,m,w;!async function(){const o=document.getElementById("game-canvas");var n;w=function(o){const t=o.getContext("2d");if(!t)throw new Error("Canvas context not available");const n=new Map;return{render:i=>{t.fillStyle="#000000",t.fillRect(0,0,o.width,o.height),i.forEach((i=>{const e=l(i),s=p(i);if(!e||!s)return;n.has(i)||n.set(i,`hsl(${360*Math.random()}, 70%, 50%)`);const r=o.width/2+e.position[0],c=o.height/2+e.position[1],a=s.radius;t.beginPath(),t.arc(r,c,a,0,2*Math.PI),t.fillStyle=n.get(i),t.fill()}))}}}(o),window.addEventListener("keydown",(o=>{switch(o.key){case"ArrowLeft":h.moveX=-1;break;case"ArrowRight":h.moveX=1;break;case"ArrowUp":h.moveZ=-1;break;case"ArrowDown":h.moveZ=1;break;case" ":h.mining=!0}})),window.addEventListener("keyup",(o=>{switch(o.key){case"ArrowLeft":case"ArrowRight":h.moveX=0;break;case"ArrowUp":case"ArrowDown":h.moveZ=0;break;case" ":h.mining=!1}})),v=r(),c(v,{position:[0,-5,0],velocity:[0,0,0]}),n={alertLevel:0,threshold:5},e[v]=n,a(v,{radius:2}),m=r(),c(m,{position:[0,0,0],velocity:[0,0,0]}),i[m]={baseNoise:0,isEmitting:!1},a(m,{radius:1});let s=performance.now();requestAnimationFrame((function o(){const n=performance.now(),i=(n-s)/1e3;s=n,function(o){const t=l(o),n=f(o);t&&n&&(t.velocity[0]=5*h.moveX,t.velocity[2]=5*h.moveZ,n.isEmitting=h.mining,n.baseNoise=h.mining?.2:0)}(m),function(o){for(const n of t){const t=l(n);t&&(t.position[0]+=t.velocity[0]*o,t.position[1]+=t.velocity[1]*o,t.position[2]+=t.velocity[2]*o)}}(i),function(){const o=Array.from(t).filter((o=>p(o)&&l(o))),n=new Map;o.forEach((o=>{const t=l(o),i=`${Math.floor(t.position[0]/5)},${Math.floor(t.position[2]/5)}`;n.has(i)||n.set(i,[]),n.get(i).push(o)})),n.forEach(((o,t)=>{const[i,e]=t.split(",").map(Number);for(let t=-1;t<=1;t++)for(let s=-1;s<=1;s++){const r=`${i+t},${e+s}`,c=n.get(r)||[];o.forEach((o=>{c.forEach((t=>{if(o>=t)return;const n=l(o),i=l(t),e=p(o),s=p(t),r=n.position[0]-i.position[0],c=n.position[1]-i.position[1],a=n.position[2]-i.position[2],f=r*r+c*c+a*a,u=e.radius+s.radius;if(f<=u*u){const o=Math.sqrt(f)||1,t=(u-o)/2,e=r/o,s=c/o,l=a/o;n.position[0]+=e*t,n.position[1]+=s*t,n.position[2]+=l*t,i.position[0]-=e*t,i.position[1]-=s*t,i.position[2]-=l*t;const p=n.velocity,h=i.velocity,v=(p[0]-h[0])*e+(p[1]-h[1])*s+(p[2]-h[2])*l;if(v>0)return;const m=2*v;p[0]-=m*e,p[1]-=m*s,p[2]-=m*l,h[0]+=m*e,h[1]+=m*s,h[2]+=m*l}}))}))}}))}(),function(o,n){const i=l(n),e=u(n);if(!i||!e)return;let s=0,r=null;if(t.forEach((t=>{const n=f(t),c=l(t);if(!n||!n.isEmitting||!c)return;const a=c.position[0]-i.position[0],u=c.position[1]-i.position[1],p=c.position[2]-i.position[2],h=a*a+u*u+p*p+1e-5,v=n.baseNoise/h;v>s&&(s=v,r=[...c.position]),e.alertLevel+=v*o})),e.alertLevel>=e.threshold){if(console.log("Worm attacking noise source!"),r){const o=r[0]-i.position[0],t=r[1]-i.position[1],n=r[2]-i.position[2],e=Math.sqrt(o*o+t*t+n*n)||1,s=5;i.velocity[0]=o/e*s,i.velocity[1]=t/e*s,i.velocity[2]=n/e*s}e.alertLevel=0}else e.alertLevel=Math.max(0,e.alertLevel-.5*o)}(i,v),function(o){const t=u(o),n=l(o);t&&n&&t.alertLevel<.5*t.threshold&&(n.velocity[0]=2*Math.sin(.002*performance.now()),n.velocity[2]=2*Math.cos(.002*performance.now()))}(v),w.render([...t]),requestAnimationFrame(o)}))}()})();